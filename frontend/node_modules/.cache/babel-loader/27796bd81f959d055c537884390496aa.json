{"ast":null,"code":"var _jsxFileName = \"/Users/hong-eungi/git/tourne-sabre/frontend/src/canvas.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from 'react';\nimport draw from './mapdraw.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Canvas = props => {\n  _s();\n\n  let pressedKeys = {};\n\n  function handleKeyPress(event) {\n    if (pressedKeys[\"KeyW\"]) {\n      props.player.move(0, -10);\n      console.log('w pressed');\n    }\n\n    if (pressedKeys[\"KeyA\"]) {\n      props.player.move(-10, 0);\n      console.log('a pressed');\n    }\n\n    if (pressedKeys[\"KeyS\"]) {\n      props.player.move(0, 10);\n      console.log('s pressed');\n    }\n\n    if (pressedKeys[\"KeyD\"]) {\n      props.player.move(10, 0);\n      console.log('d pressed');\n    }\n  }\n\n  React.useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown); // cleanup this component\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, []);\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    let frameCount = 0;\n    let animationFrameId;\n\n    const render = () => {\n      frameCount++;\n      props.player.sw_angle += props.player.sw_speed;\n      draw(ctx, props.player);\n      animationFrameId = window.requestAnimationFrame(render);\n    };\n\n    render();\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n    };\n  }, [draw]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    ...props,\n    tabIndex: \"0\",\n    onKeyPress: handleKeyPress\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Canvas, \"F+WBYqQcIoACjArHNHXlaCGvnfE=\");\n\n_c = Canvas;\nexport default Canvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["/Users/hong-eungi/git/tourne-sabre/frontend/src/canvas.js"],"names":["React","useRef","useEffect","draw","Canvas","props","pressedKeys","handleKeyPress","event","player","move","console","log","window","addEventListener","handleKeyDown","removeEventListener","canvasRef","canvas","current","ctx","getContext","frameCount","animationFrameId","render","sw_angle","sw_speed","requestAnimationFrame","cancelAnimationFrame"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAyC,OAAzC;AACA,OAAOC,IAAP,MAAiB,cAAjB;;;AAEA,MAAMC,MAAM,GAAGC,KAAK,IAAI;AAAA;;AACtB,MAAIC,WAAW,GAAG,EAAlB;;AACA,WAASC,cAAT,CAAwBC,KAAxB,EAA8B;AAC5B,QAAGF,WAAW,CAAC,MAAD,CAAd,EAAuB;AACrBD,MAAAA,KAAK,CAACI,MAAN,CAAaC,IAAb,CAAkB,CAAlB,EAAoB,CAAC,EAArB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACD;;AACD,QAAGN,WAAW,CAAC,MAAD,CAAd,EAAuB;AACrBD,MAAAA,KAAK,CAACI,MAAN,CAAaC,IAAb,CAAkB,CAAC,EAAnB,EAAsB,CAAtB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACD;;AACD,QAAGN,WAAW,CAAC,MAAD,CAAd,EAAuB;AACrBD,MAAAA,KAAK,CAACI,MAAN,CAAaC,IAAb,CAAkB,CAAlB,EAAoB,EAApB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACD;;AACD,QAAGN,WAAW,CAAC,MAAD,CAAd,EAAuB;AACrBD,MAAAA,KAAK,CAACI,MAAN,CAAaC,IAAb,CAAkB,EAAlB,EAAqB,CAArB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACD;AACJ;;AAECZ,EAAAA,KAAK,CAACE,SAAN,CAAgB,MAAM;AACpBW,IAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmCC,aAAnC,EADoB,CAGpB;;AACA,WAAO,MAAM;AACXF,MAAAA,MAAM,CAACG,mBAAP,CAA2B,SAA3B,EAAsCD,aAAtC;AACD,KAFD;AAGD,GAPD,EAOG,EAPH;AAQE,QAAME,SAAS,GAAGhB,MAAM,CAAC,IAAD,CAAxB;AAEAC,EAAAA,SAAS,CAAC,MAAM;AAEhB,UAAMgB,MAAM,GAAGD,SAAS,CAACE,OAAzB;AACA,UAAMC,GAAG,GAAGF,MAAM,CAACG,UAAP,CAAkB,IAAlB,CAAZ;AACA,QAAIC,UAAU,GAAG,CAAjB;AACA,QAAIC,gBAAJ;;AAEA,UAAMC,MAAM,GAAG,MAAM;AACnBF,MAAAA,UAAU;AACVjB,MAAAA,KAAK,CAACI,MAAN,CAAagB,QAAb,IAAuBpB,KAAK,CAACI,MAAN,CAAaiB,QAApC;AACAvB,MAAAA,IAAI,CAACiB,GAAD,EAAMf,KAAK,CAACI,MAAZ,CAAJ;AACAc,MAAAA,gBAAgB,GAAGV,MAAM,CAACc,qBAAP,CAA6BH,MAA7B,CAAnB;AACD,KALD;;AAMAA,IAAAA,MAAM;AAEJ,WAAO,MAAM;AACXX,MAAAA,MAAM,CAACe,oBAAP,CAA4BL,gBAA5B;AACD,KAFD;AAGD,GAlBQ,EAkBN,CAACpB,IAAD,CAlBM,CAAT;AAoBF,sBAAO;AAAQ,IAAA,GAAG,EAAEc,SAAb;AAAA,OAA4BZ,KAA5B;AAAmC,IAAA,QAAQ,EAAC,GAA5C;AAAgD,IAAA,UAAU,EAAEE;AAA5D;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CApDD;;GAAMH,M;;KAAAA,M;AAsDN,eAAeA,MAAf","sourcesContent":["import React, { useRef, useEffect } from 'react'\nimport draw from './mapdraw.js'\n\nconst Canvas = props => {\n  let pressedKeys = {};\n  function handleKeyPress(event){\n    if(pressedKeys[\"KeyW\"]){\n      props.player.move(0,-10);\n      console.log('w pressed')\n    }\n    if(pressedKeys[\"KeyA\"]){\n      props.player.move(-10,0);\n      console.log('a pressed')\n    }\n    if(pressedKeys[\"KeyS\"]){\n      props.player.move(0,10);\n      console.log('s pressed')\n    }\n    if(pressedKeys[\"KeyD\"]){\n      props.player.move(10,0);\n      console.log('d pressed')\n    }\n}\n\n  React.useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n\n    // cleanup this component\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, []);\n    const canvasRef = useRef(null)\n  \n    useEffect(() => {\n    \n    const canvas = canvasRef.current\n    const ctx = canvas.getContext('2d')\n    let frameCount = 0\n    let animationFrameId\n    \n    const render = () => {\n      frameCount++;\n      props.player.sw_angle+=props.player.sw_speed;\n      draw(ctx, props.player)\n      animationFrameId = window.requestAnimationFrame(render)\n    }\n    render()\n    \n      return () => {\n        window.cancelAnimationFrame(animationFrameId)\n      }\n    }, [draw])\n  \n  return <canvas ref={canvasRef} {...props} tabIndex=\"0\" onKeyPress={handleKeyPress}/>\n}\n\nexport default Canvas"]},"metadata":{},"sourceType":"module"}