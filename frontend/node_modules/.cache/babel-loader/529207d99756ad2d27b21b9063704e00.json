{"ast":null,"code":"var _jsxFileName = \"/Users/hong-eungi/git/tourne-sabre/frontend/src/canvas.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useEffect } from 'react';\nimport { Player } from './object.js';\nimport draw from './mapdraw.js';\nimport { map } from './map.js';\nimport useInterval from '@use-it/interval';\nimport frameUpdate from './frameUpdater.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Canvas = props => {\n  _s();\n\n  const canvasRef = useRef(null);\n  const fps = 30;\n  var pressedKeys = {};\n  var player = new Player(\"James\");\n\n  function handleKeyDown(event) {\n    pressedKeys[event.key] = true;\n  }\n\n  function handleKeyUp(event) {\n    delete pressedKeys[event.key];\n  }\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n    map.addPlayer(player);\n    return () => {\n      console.log('removing keyboard');\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup', handleKeyUp);\n    };\n  }, []);\n  useInterval(() => {\n    frameUpdate(player, pressedKeys);\n  }, 1000 / fps);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    let frameCount = 0;\n    let animationFrameId;\n\n    const render = () => {\n      frameCount++;\n      draw(ctx, player);\n      animationFrameId = window.requestAnimationFrame(render);\n    };\n\n    render();\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n    };\n  }, [draw]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Canvas, \"IfGU01htGvbvqcD9HLVmorBPi1g=\", false, function () {\n  return [useInterval];\n});\n\n_c = Canvas;\nexport default Canvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["/Users/hong-eungi/git/tourne-sabre/frontend/src/canvas.js"],"names":["useRef","useEffect","Player","draw","map","useInterval","frameUpdate","Canvas","props","canvasRef","fps","pressedKeys","player","handleKeyDown","event","key","handleKeyUp","window","addEventListener","addPlayer","console","log","removeEventListener","canvas","current","ctx","getContext","frameCount","animationFrameId","render","requestAnimationFrame","cancelAnimationFrame"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,SAAjB,QAAkC,OAAlC;AACA,SAAQC,MAAR,QAAqB,aAArB;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,SAAQC,GAAR,QAAkB,UAAlB;AACA,OAAOC,WAAP,MAAwB,kBAAxB;AACA,OAAOC,WAAP,MAAwB,mBAAxB;;;AAEA,MAAMC,MAAM,GAAGC,KAAK,IAAI;AAAA;;AAEtB,QAAMC,SAAS,GAAGT,MAAM,CAAC,IAAD,CAAxB;AACA,QAAMU,GAAG,GAAG,EAAZ;AACA,MAAIC,WAAW,GAAG,EAAlB;AACA,MAAIC,MAAM,GAAG,IAAIV,MAAJ,CAAW,OAAX,CAAb;;AAEA,WAASW,aAAT,CAAuBC,KAAvB,EAA6B;AAC3BH,IAAAA,WAAW,CAACG,KAAK,CAACC,GAAP,CAAX,GAAyB,IAAzB;AACD;;AACD,WAASC,WAAT,CAAqBF,KAArB,EAA2B;AACzB,WAAOH,WAAW,CAACG,KAAK,CAACC,GAAP,CAAlB;AACD;;AAEDd,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmCL,aAAnC;AACAI,IAAAA,MAAM,CAACC,gBAAP,CAAwB,OAAxB,EAAgCF,WAAhC;AACAZ,IAAAA,GAAG,CAACe,SAAJ,CAAcP,MAAd;AACA,WAAO,MAAM;AACXQ,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAJ,MAAAA,MAAM,CAACK,mBAAP,CAA2B,SAA3B,EAAsCT,aAAtC;AACAI,MAAAA,MAAM,CAACK,mBAAP,CAA2B,OAA3B,EAAmCN,WAAnC;AACD,KAJD;AAKD,GATQ,EASN,EATM,CAAT;AAWAX,EAAAA,WAAW,CAAC,MAAI;AAACC,IAAAA,WAAW,CAACM,MAAD,EAAQD,WAAR,CAAX;AAAgC,GAAtC,EAAuC,OAAKD,GAA5C,CAAX;AAEAT,EAAAA,SAAS,CAAC,MAAM;AAEd,UAAMsB,MAAM,GAAGd,SAAS,CAACe,OAAzB;AACA,UAAMC,GAAG,GAAGF,MAAM,CAACG,UAAP,CAAkB,IAAlB,CAAZ;AACA,QAAIC,UAAU,GAAG,CAAjB;AACA,QAAIC,gBAAJ;;AAEA,UAAMC,MAAM,GAAG,MAAM;AACnBF,MAAAA,UAAU;AACVxB,MAAAA,IAAI,CAACsB,GAAD,EAAMb,MAAN,CAAJ;AACAgB,MAAAA,gBAAgB,GAAGX,MAAM,CAACa,qBAAP,CAA6BD,MAA7B,CAAnB;AACD,KAJD;;AAMAA,IAAAA,MAAM;AAEN,WAAO,MAAM;AACXZ,MAAAA,MAAM,CAACc,oBAAP,CAA4BH,gBAA5B;AACD,KAFD;AAGD,GAlBQ,EAkBN,CAACzB,IAAD,CAlBM,CAAT;AAoBA,sBAAO;AAAQ,IAAA,GAAG,EAAEM,SAAb;AAAA,OAA4BD;AAA5B;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAhDD;;GAAMD,M;UAyBJF,W;;;KAzBIE,M;AAkDN,eAAeA,MAAf","sourcesContent":["import { useRef, useEffect } from 'react'\nimport {Player} from './object.js'\nimport draw from './mapdraw.js'\nimport {map} from './map.js'\nimport useInterval from '@use-it/interval'\nimport frameUpdate from './frameUpdater.js'\n\nconst Canvas = props => {\n\n  const canvasRef = useRef(null)\n  const fps = 30;\n  var pressedKeys = {};\n  var player = new Player(\"James\");\n\n  function handleKeyDown(event){\n    pressedKeys[event.key] = true;\n  } \n  function handleKeyUp(event){\n    delete pressedKeys[event.key]\n  } \n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup',handleKeyUp)\n    map.addPlayer(player);\n    return () => {\n      console.log('removing keyboard')\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup',handleKeyUp)\n    };\n  }, []);\n\n  useInterval(()=>{frameUpdate(player,pressedKeys)},1000/fps)\n\n  useEffect(() => {\n  \n    const canvas = canvasRef.current\n    const ctx = canvas.getContext('2d')\n    let frameCount = 0\n    let animationFrameId\n    \n    const render = () => {\n      frameCount++;\n      draw(ctx, player)\n      animationFrameId = window.requestAnimationFrame(render)\n    }\n\n    render()\n\n    return () => {\n      window.cancelAnimationFrame(animationFrameId)\n    }\n  }, [draw])\n  \n  return <canvas ref={canvasRef} {...props}/>\n}\n\nexport default Canvas"]},"metadata":{},"sourceType":"module"}