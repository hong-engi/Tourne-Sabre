{"ast":null,"code":"var _jsxFileName = \"/Users/hong-eungi/git/tourne-sabre/frontend/src/canvas.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useEffect } from 'react';\nimport { Player } from './object.js';\nimport draw from './mapdraw.js';\nimport { map } from './map.js';\nimport useInterval from '@use-it/interval';\nimport frameUpdate from './frameUpdater.js';\nimport socketIOClient from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = socketIOClient(\"http://localhost:8081\", {\n  cors: {\n    origin: \"http://localhost:8081\",\n    credentials: true\n  },\n  transports: ['websocket']\n});\nvar player = null;\n\nconst makePlayer = name => {\n  player = new Player(name);\n  map.addPlayer(player);\n  socket.emit(\"newplayer\");\n};\n\nvar cnt = 0;\n\nfunction death(myRef) {\n  player = null;\n  myRef.current.appearThis();\n}\n\nconst Canvas = props => {\n  _s();\n\n  const canvasRef = useRef(null);\n  const fps = 30;\n  var pressedKeys = {};\n\n  function handleKeyDown(event) {\n    pressedKeys[event.key] = true;\n  }\n\n  function handleKeyUp(event) {\n    delete pressedKeys[event.key];\n  }\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n    return () => {\n      console.log('removing keyboard');\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup', handleKeyUp);\n    };\n  }, []);\n  useInterval(() => {\n    if (player) frameUpdate(player, pressedKeys, props.myRef);\n  }, 1000 / fps);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    let frameCount = 0;\n    let animationFrameId;\n\n    const render = () => {\n      frameCount++;\n      draw(ctx, player);\n      animationFrameId = window.requestAnimationFrame(render);\n    };\n\n    render();\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n    };\n  }, [draw]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Canvas, \"IfGU01htGvbvqcD9HLVmorBPi1g=\", false, function () {\n  return [useInterval];\n});\n\n_c = Canvas;\nexport default Canvas;\nexport { makePlayer, death };\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["/Users/hong-eungi/git/tourne-sabre/frontend/src/canvas.js"],"names":["useRef","useEffect","Player","draw","map","useInterval","frameUpdate","socketIOClient","socket","cors","origin","credentials","transports","player","makePlayer","name","addPlayer","emit","cnt","death","myRef","current","appearThis","Canvas","props","canvasRef","fps","pressedKeys","handleKeyDown","event","key","handleKeyUp","window","addEventListener","console","log","removeEventListener","canvas","ctx","getContext","frameCount","animationFrameId","render","requestAnimationFrame","cancelAnimationFrame"],"mappings":"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","sourcesContent":["import { useRef, useEffect } from 'react'\nimport {Player} from './object.js'\nimport draw from './mapdraw.js'\nimport {map} from './map.js'\nimport useInterval from '@use-it/interval'\nimport frameUpdate from './frameUpdater.js'\nimport socketIOClient from \"socket.io-client\";\n\nconst socket = socketIOClient(\"http://localhost:8081\", {  \n  cors: {\n  origin: \"http://localhost:8081\",\n  credentials: true},\n  transports : ['websocket']} \n);\n\nvar player = null\nconst makePlayer = (name) => {\n  player = new Player(name);\n  map.addPlayer(player);\n  socket.emit(\"newplayer\")\n}\n\nvar cnt = 0\nfunction death(myRef){\n  player=null\n  myRef.current.appearThis()\n}\n\nconst Canvas = props => {\n  const canvasRef = useRef(null)\n  const fps = 30;\n  var pressedKeys = {};\n\n  function handleKeyDown(event){\n    pressedKeys[event.key] = true;\n  } \n  function handleKeyUp(event){\n    delete pressedKeys[event.key]\n  } \n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup',handleKeyUp)\n    return () => {\n      console.log('removing keyboard')\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup',handleKeyUp)\n    };\n  }, []);\n\n  useInterval(()=>{if(player)frameUpdate(player,pressedKeys,props.myRef);},1000/fps)\n\n  useEffect(() => {\n  \n    const canvas = canvasRef.current\n    const ctx = canvas.getContext('2d')\n    let frameCount = 0\n    let animationFrameId\n    \n    const render = () => {\n      frameCount++;\n      draw(ctx, player)\n      animationFrameId = window.requestAnimationFrame(render)\n    }\n\n    render()\n\n    return () => {\n      window.cancelAnimationFrame(animationFrameId)\n    }\n  }, [draw])\n  \n  return <canvas ref={canvasRef} {...props}/>\n}\n\nexport default Canvas\nexport {makePlayer,death}"]},"metadata":{},"sourceType":"module"}