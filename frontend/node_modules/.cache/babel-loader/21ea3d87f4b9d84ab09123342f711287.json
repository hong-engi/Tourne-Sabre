{"ast":null,"code":"import axios from \"axios\";\nimport { Item } from \"./object.js\";\n\nclass mapConstructor {\n  constructor() {\n    this.itemList = [];\n    this.playerList = [];\n  }\n\n  test() {\n    axios.post('api/map/test');\n    console.log('test success');\n  }\n\n  getItems() {\n    axios.get(`/api/map/item`).then(response => {\n      this.itemList = response.data;\n    });\n  }\n\n  getPlayers() {\n    axios.get(`/api/map/player`).then(response => {\n      this.playerList = response.data;\n    });\n  }\n\n  ate(item) {\n    axios.delete(`/api/map/item/${item.id}/ate`).then(() => axios.get('/api/map/item')).then(response => {\n      this.itemList = response.data;\n    });\n  }\n\n  kill(player) {\n    axios.delete(`/api/map/player/${player.id}/kill`).then(() => axios.get('/api/map/player')).then(response => {\n      this.playerList = response.data;\n    });\n  }\n\n  addPlayer(player) {\n    axios.post(`/api/map/player/add`, player).then(() => axios.get('/api/map/player')).then(response => {\n      this.playerList = response.data;\n    });\n  }\n\n  addItem() {\n    let num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 4000;\n\n    for (let i = 0; i < num; i++) {\n      let item = Item.randomItem();\n      axios.post(`/api/map/item/add`, item).then(() => axios.get('/api/map/item')).then(response => {\n        this.itemList = response.data;\n      });\n    }\n  }\n\n  damage(player, dmg) {\n    axios.put(`/api/map/player/${player.id}/damage`, dmg).then(() => axios.get('/api/map/player')).then(response => {\n      this.playerList = response.data;\n    });\n  }\n\n}\n\n;\nvar map = new mapConstructor();\nexport { map };","map":{"version":3,"sources":["/Users/hong-eungi/git/tourne-sabre/frontend/src/map.js"],"names":["axios","Item","mapConstructor","constructor","itemList","playerList","test","post","console","log","getItems","get","then","response","data","getPlayers","ate","item","delete","id","kill","player","addPlayer","addItem","num","i","randomItem","damage","dmg","put","map"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,IAAR,QAAmB,aAAnB;;AAEA,MAAMC,cAAN,CAAoB;AAChBC,EAAAA,WAAW,GAAE;AACT,SAAKC,QAAL,GAAc,EAAd;AACA,SAAKC,UAAL,GAAgB,EAAhB;AACH;;AAEDC,EAAAA,IAAI,GAAE;AACFN,IAAAA,KAAK,CAACO,IAAN,CAAW,cAAX;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACH;;AAEDC,EAAAA,QAAQ,GAAE;AACNV,IAAAA,KAAK,CAACW,GAAN,CAAW,eAAX,EACCC,IADD,CACMC,QAAQ,IAAI;AACd,WAAKT,QAAL,GAAgBS,QAAQ,CAACC,IAAzB;AACH,KAHD;AAIH;;AACDC,EAAAA,UAAU,GAAE;AACRf,IAAAA,KAAK,CAACW,GAAN,CAAW,iBAAX,EACCC,IADD,CACMC,QAAQ,IAAI;AACd,WAAKR,UAAL,GAAkBQ,QAAQ,CAACC,IAA3B;AACH,KAHD;AAIH;;AAEDE,EAAAA,GAAG,CAACC,IAAD,EAAM;AACLjB,IAAAA,KAAK,CAACkB,MAAN,CAAc,iBAAgBD,IAAI,CAACE,EAAG,MAAtC,EACKP,IADL,CACU,MAAMZ,KAAK,CAACW,GAAN,CAAU,eAAV,CADhB,EAEKC,IAFL,CAEUC,QAAQ,IAAI;AACd,WAAKT,QAAL,GAAgBS,QAAQ,CAACC,IAAzB;AACP,KAJD;AAKH;;AAEDM,EAAAA,IAAI,CAACC,MAAD,EAAQ;AACRrB,IAAAA,KAAK,CAACkB,MAAN,CAAc,mBAAkBG,MAAM,CAACF,EAAG,OAA1C,EACKP,IADL,CACU,MAAMZ,KAAK,CAACW,GAAN,CAAU,iBAAV,CADhB,EAEKC,IAFL,CAEUC,QAAQ,IAAI;AACd,WAAKR,UAAL,GAAkBQ,QAAQ,CAACC,IAA3B;AACP,KAJD;AAKH;;AAEDQ,EAAAA,SAAS,CAACD,MAAD,EAAQ;AACbrB,IAAAA,KAAK,CAACO,IAAN,CAAY,qBAAZ,EAAiCc,MAAjC,EACKT,IADL,CACU,MAAMZ,KAAK,CAACW,GAAN,CAAU,iBAAV,CADhB,EAEKC,IAFL,CAEUC,QAAQ,IAAI;AACd,WAAKR,UAAL,GAAkBQ,QAAQ,CAACC,IAA3B;AACP,KAJD;AAKH;;AAEDS,EAAAA,OAAO,GAAY;AAAA,QAAXC,GAAW,uEAAL,IAAK;;AACf,SAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACD,GAAd,EAAkBC,CAAC,EAAnB,EAAsB;AAClB,UAAIR,IAAI,GAAGhB,IAAI,CAACyB,UAAL,EAAX;AACA1B,MAAAA,KAAK,CAACO,IAAN,CAAY,mBAAZ,EAA+BU,IAA/B,EACCL,IADD,CACM,MAAMZ,KAAK,CAACW,GAAN,CAAU,eAAV,CADZ,EAECC,IAFD,CAEMC,QAAQ,IAAI;AACd,aAAKT,QAAL,GAAgBS,QAAQ,CAACC,IAAzB;AACP,OAJG;AAKH;AACJ;;AAEDa,EAAAA,MAAM,CAACN,MAAD,EAAQO,GAAR,EAAY;AACd5B,IAAAA,KAAK,CAAC6B,GAAN,CAAW,mBAAkBR,MAAM,CAACF,EAAG,SAAvC,EAAgDS,GAAhD,EACKhB,IADL,CACU,MAAMZ,KAAK,CAACW,GAAN,CAAU,iBAAV,CADhB,EAEKC,IAFL,CAEUC,QAAQ,IAAI;AACd,WAAKR,UAAL,GAAkBQ,QAAQ,CAACC,IAA3B;AACP,KAJD;AAKH;;AAjEe;;AAkEnB;AAED,IAAIgB,GAAG,GAAG,IAAI5B,cAAJ,EAAV;AAEA,SAAQ4B,GAAR","sourcesContent":["import axios from \"axios\";\nimport {Item} from \"./object.js\"\n\nclass mapConstructor{\n    constructor(){\n        this.itemList=[];\n        this.playerList=[];\n    }\n\n    test(){\n        axios.post('api/map/test')\n        console.log('test success')\n    }\n\n    getItems(){\n        axios.get(`/api/map/item`)\n        .then(response => {\n            this.itemList = response.data;\n        })\n    }\n    getPlayers(){\n        axios.get(`/api/map/player`)\n        .then(response => {\n            this.playerList = response.data;\n        })\n    }\n\n    ate(item){\n        axios.delete(`/api/map/item/${item.id}/ate`)\n            .then(() => axios.get('/api/map/item'))\n            .then(response => {\n                this.itemList = response.data;\n        });\n    };\n\n    kill(player){\n        axios.delete(`/api/map/player/${player.id}/kill`)\n            .then(() => axios.get('/api/map/player'))\n            .then(response => {\n                this.playerList = response.data;\n        });\n    };\n\n    addPlayer(player){\n        axios.post(`/api/map/player/add`,player)\n            .then(() => axios.get('/api/map/player'))\n            .then(response => {\n                this.playerList = response.data;\n        });\n    };\n\n    addItem(num = 4000){\n        for(let i=0;i<num;i++){\n            let item = Item.randomItem()\n            axios.post(`/api/map/item/add`,item)\n            .then(() => axios.get('/api/map/item'))\n            .then(response => {\n                this.itemList = response.data;\n        });\n        }\n    }\n\n    damage(player,dmg){\n        axios.put(`/api/map/player/${player.id}/damage`,dmg)\n            .then(() => axios.get('/api/map/player'))\n            .then(response => {\n                this.playerList = response.data;\n        });\n    }\n};\n\nvar map = new mapConstructor()\n\nexport {map}"]},"metadata":{},"sourceType":"module"}